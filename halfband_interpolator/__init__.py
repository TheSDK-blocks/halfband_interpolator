# halfband class 
# Last modification by Marko Kosunen, marko.kosunen@aalto.fi, 20.11.2018 21:48
import os
import sys
import numpy as np
import scipy.signal as sig
import tempfile
import subprocess
import shlex
import time
from thesdk import *
from verilog import *

#Simple buffer template
class halfband_interpolator(verilog,thesdk):
    @property
    def _classfile(self):
        return os.path.dirname(os.path.realpath(__file__)) + "/"+__name__

    def __init__(self,*arg): 
        self.proplist = [ 'Rs' ];    #properties that can be propagated from parent
        self.Rs_high = 160;          # sampling frequency
        self.halfband_Bandwidth=0.45 # Pass band bandwidth
        self.halfband_N=40           #Number of coeffs
        self.scale=2
        self.iptr_A = IO();
        self.model='py';             #can be set externally, but is not propagated
        self._Z = IO();
        if len(arg)>=1:
            parent=arg[0]
            self.copy_propval(parent,self.proplist)
            self.parent =parent;
        self.init()

    def init(self):
        self.Rs_low=self.Rs_high/2   #to be consistent with cic3 and a general deciamtors
        self.H=self.firhalfband(**{'n':self.halfband_N, 'bandwidth':self.halfband_Bandwidth})
        self.def_verilog()
        self._vlogparameters=dict([ ('g_Rs_high',self.Rs_high), ('g_scale',self.scale) ])

    def main(self):
        interpolated=np.zeros((2*self.iptr_A.Data.reshape(-1,1).shape[0],1),dtype=complex)
        interpolated[0::2,0]=self.iptr_A.Data.reshape(-1,1)[:,0]
        out=np.convolve(interpolated[:,0],self.H[:,0],mode='full').reshape((-1,1))
        if self.par:
            queue.put(out)
        self._Z.Data=out

    def run(self,*arg):
        if len(arg)>0:
            self.par=True      #flag for parallel processing
            queue=arg[0]  #multiprocessing.Queue as the first argument
        else:
            self.par=False

        if self.model=='py':
            self.main()
        else: 
          self.write_infile()
          self.run_verilog()
          self.read_outfile()

    def firhalfband(self,**kwargs):
       n=kwargs.get('n',32)
       if np.remainder(n,2) > 0:
           self.print_log(type='F', msg='Number of coefficients must be even')
       bandwidth=kwargs.get('bandwidth',0.45) # Fs=1
       desired=np.array([ 1, 0] )
       bands=np.array([0, bandwidth, 0.499,0.5])
       coeffs=sig.remez(n, bands, desired, Hz=1)
       hb=np.zeros((2*n-1,1))
       hb[0::2,0]=coeffs
       hb[n-1,0]=1
       return hb
  
    def write_infile(self):
        rndpart=os.path.basename(tempfile.mkstemp()[1])
        if self.model=='sv':
            self._infile=self._vlogsimpath +'/A_' + rndpart +'.txt'
            self._outfile=self._vlogsimpath +'/Z_' + rndpart +'.txt'
        elif self.model=='vhdl':
            pass
        else:
            pass
        try:
          os.remove(self._infile)
        except:
          pass
        fid=open(self._infile,'wb')
        np.savetxt(fid,self.iptr_A.Data.reshape(-1,1).view(float),fmt='%i', delimiter='\t')
        fid.close()

    def read_outfile(self):
        fid=open(self._outfile,'r')
        out = np.loadtxt(fid,dtype=complex)
        #Of course it does not work symmetrically with savetxt
        out=(out[:,0]+1j*out[:,1]).reshape(-1,1) 
        fid.close()
        if self.par:
          queue.put(out)
        self._Z.Data=out
        os.remove(self._outfile)

    def export_scala(self):
       #This is the first effort to support generators
       bwstr=str(self.halfband_Bandwidth).replace('.','')
       packagestr="halfband_BW_"+bwstr+"_N_"+str(self.halfband_N)
       tapfile=os.path.dirname(os.path.realpath(__file__)) +"/"+packagestr+".scala"
       fid=open(tapfile,'w')
       msg="//Generated by TheSDK/halfband.export_scala\n"
       fid.write(msg)
       msg="package "+ packagestr+"\n\n"
       fid.write(msg)
       msg="object "+ packagestr+" {\n"
       fid.write(msg)
       msg="val H=Seq("
       fid.write(msg)
       lines=self.H.shape[0]
       for k in range(lines-1):
           fid.write("%0.32f,\n" %(self.H[k]))
       fid.write("%0.32f)\n }\n" %(self.H[lines-1]))
       fid.close()

if __name__=="__main__":
    pass
